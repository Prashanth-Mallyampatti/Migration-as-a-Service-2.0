---
- hosts: worker
  gather_facts: False
  vars:
    ansible_python_interpreter: /usr/bin/python2

  vars_files:
    - /root/Migration-as-a-Service-2.0/src/northbound/config_files/infrastructure/{{ tenant_name }}.yml
    - /root/Migration-as-a-Service-2.0/etc/{{ tenant_name }}/{{ tenant_name }}c2.yml

  tasks:
  - name: Create Tenant VETH pairs
    shell: |
      docker exec "{{ item.name }}" ip link show "{{ item.tenant_if }}" ; if [ $? -ne 0 ] ; then ip link add "{{ item.tenant_if }}" type veth peer name "{{ item.pns_if }}" ; fi
    ignore_errors: yes
    with_items:
      - "{{ Namespace }}"

  - name: Attach Tenant VETH Pairs
    shell: |
      ip netns exec pns1 ip link show "{{ item.pns_if }}" ; if [ $? -ne 0 ] ; then ip link set "{{ item.pns_if }}" netns pns1 ; fi
      docker exec "{{ item.name }}" ip link show "{{ item.tenant_if }}" ; if [ $? -ne 0 ] ; then ip link set "{{ item.tenant_if }}" netns "{{ item.pid }}" ; fi
      ip netns exec pns1 ip link set dev "{{ item.pns_if }}" up
      docker exec "{{ item.name }}" ip link set dev "{{ item.tenant_if }}" up
    with_items:
      - "{{ Namespace }}"

  - name: Add IP addresses to Tenant VETH Pairs
    shell: |
      ip netns exec pns1 ip addr show "{{ item.pns_if }}" | awk 'FNR==3{ print $2 }' | grep -w '^{{ item.pns_ip }}' ; if [ $? -ne 0 ] ; then ip netns exec pns1 ip addr add "{{ item.pns_ip }}" dev "{{ item.pns_if }}" ; fi
      docker exec "{{ item.name }}" ip addr show "{{ item.tenant_if }}" | awk 'FNR==3{ print $2 }' | grep -w '^{{ item.tenant_ip }}' ; if [ $? -ne 0 ] ; then docker exec "{{ item.name }}" ip addr add "{{ item.tenant_ip }}" dev "{{ item.tenant_if }}" ; fi
    with_items:
      - "{{ Namespace}}"

  - name: Create Namespace VETH Pairs
    shell: |
      docker exec "{{ item.1.tenant_ns_name }}" ip link show "{{ item.1.tenant_ns_if }}" ; if [ $? -ne 0 ] ; then ip link add "{{ item.1.tenant_ns_if }}" type veth peer name "{{ item.1.tenant_sub_if }}" ; fi
    ignore_errors: yes
    with_subelements:
      - "{{ Subnet }}"
      - tenant_ns

  - name: Attach Namespace VETH Pairs
    shell: |
      docker exec "{{ item.1.tenant_ns_name }}" ip link show "{{ item.1.tenant_ns_if }}" ; if [ $? -ne 0 ] ; then ip link set "{{ item.1.tenant_ns_if }}" netns "{{ item.1.tenant_ns_pid }}" ; fi
      docker exec "{{ item.0.ns_name }}" ip link show "{{ item.1.tenant_sub_if }}" ; if [ $? -ne 0 ] ; then ip link set "{{ item.1.tenant_sub_if }}" netns "{{ item.0.pid }}" ; fi
    with_subelements:
      - "{{ Subnet }}"
      - tenant_ns

  - name: Set Namespace VETH Pairs UP
    shell: |
      docker exec "{{ item.1.tenant_ns_name }}" ip link set dev "{{ item.1.tenant_ns_if }}" up
      docker exec "{{ item.0.ns_name }}" ip link set dev "{{ item.1.tenant_sub_if }}" up
    with_subelements:
      - "{{ Subnet }}"
      - tenant_ns

  - name: Add IP addresses to Namespace VETH Pairs
    shell: |
      docker exec "{{ item.0.ns_name }}" ip addr show "{{ item.1.tenant_sub_if }}" | awk 'FNR==3{ print $2 }' | grep -w '^{{ item.1.tenant_sub_ip }}' ; if [ $? -ne 0 ] ; then docker exec "{{ item.0.ns_name }}" ip addr add "{{ item.1.tenant_sub_ip }}" dev "{{ item.1.tenant_sub_if }}" ; fi

      docker exec "{{ item.1.tenant_ns_name }}" ip addr show "{{ item.1.tenant_ns_if }}" | awk 'FNR==3{ print $2 }' | grep -w '^{{ item.1.tenant_ns_ip }}' ; if [ $? -ne 0 ] ; then docker exec "{{ item.1.tenant_ns_name }}" ip addr add "{{ item.1.tenant_ns_ip }}" dev "{{ item.1.tenant_ns_if }}" ; fi
    with_subelements:
      - "{{ Subnet }}"
      - tenant_ns

  - name: Delete default route
    shell: |
      docker exec "{{ item.name }}" ip route show default | grep -w '[d]efault via' ; if [ $? -eq 0 ] ; then docker exec "{{ item.name }}" ip route del default ; fi
    with_items:
      - "{{ Namespace }}"

  - name: Add IP Route to Tenant
    shell: |
      docker exec "{{ item.name }}" ip route show default | grep -w '[d]efault via {{ item.default_route_ip }}' ; if [ $? -ne 0 ] ; then docker exec "{{ item.name }}" ip route add default via "{{ item.default_route_ip }}" ; fi
    with_items:
      - "{{ Namespace }}"

  - name: Delete default route in tenant subnet
    shell: |
      docker exec "{{ item.ns_name }}" ip route show default | grep -w '[d]efault via' ; if [ $? -eq 0 ] ; then docker exec "{{ item.ns_name }}" ip route del default ; fi
    with_items:
      - "{{ Subnet }}"

  - name: Add IP Route to Tenant Subnet
    shell: |
      docker exec "{{ item.ns_name }}" ip route show default | grep -w '[d]efault via {{ item.default_route_ip }}' ; if [ $? -ne 0 ] ; then docker exec "{{ item.ns_name }}" ip route add default via "{{ item.default_route_ip }}" ; fi
    with_items:
      - "{{ Subnet }}"

  - name: Create bridge inside namespace
    shell: |
      docker exec "{{ item.ns_name }}" brctl show | grep -w '^{{ item.bridge_name }}'; if [ $? -ne 0 ] ; then docker exec "{{ item.ns_name }}" brctl addbr "{{ item.bridge_name }}" ; fi
      docker exec "{{ item.ns_name }}" ip link set dev "{{ item.bridge_name }}" up
    with_items:
      - "{{ Subnet }}"

  - name: Create DNS VETH Pair
    shell: |
      docker exec "{{ item.0.ns_name }}" ip link show "{{ item.1.brif }}" ; if [ $? -ne 0 ] ; then docker exec "{{ item.0.ns_name }}" ip link add "{{ item.1.brif }}" type veth peer name "{{ item.1.dnsif }}" ; fi
      docker exec "{{ item.0.ns_name }}" ip link set dev "{{ item.1.brif }}" up
      docker exec "{{ item.0.ns_name }}" ip link set dev "{{ item.1.dnsif }}" up
    when:
      - item.1.brif != []
      - item.1.dhcp_end != []
      - item.1.dhcp_start != []
      - item.1.dnsif != []
      - item.1.dnsif_ip != []
      - item.1.net_mask != []
    with_subelements:
      - "{{ Subnet }}"
      - dns

  - name: Attach DNS VETH Pair
    shell: |
      docker exec "{{ item.0.ns_name }}" brctl show "{{ item.0.bridge_name }}" | grep -w '{{ item.1.brif }}' ; if [ $? -ne 0 ] ; then docker exec "{{ item.0.ns_name }}" brctl addif "{{ item.0.bridge_name }}" "{{ item.1.brif }}" ; fi
    when:
      - item.1.brif != []
      - item.1.dhcp_end != []
      - item.1.dhcp_start != []
      - item.1.dnsif != []
      - item.1.dnsif_ip != []
      - item.1.net_mask != []
    with_subelements:
      - "{{ Subnet }}"
      - dns

  - name: Create VETH Pairs
    shell: |
      docker exec "{{ item.0.ns_name }}" ip link show "{{ item.1.brif }}" ; if [ $? -ne 0 ] ; then ip link add "{{ item.1.vmif }}" type veth peer name "{{ item.1.brif }}" ; fi
      ip link set dev "{{ item.1.brif }}" up
      ip link set dev "{{ item.1.vmif }}" up
    when:
      - item.1.brif != []
      - item.1.name != []
      - item.1.vmif != []
    with_subelements:
      - "{{ Subnet }}"
      - vms

  - name: Attach VETH Pairs
    shell: |
      ip link show "{{ item.1.brif }}" ; if [ $? -eq 0 ] ; then ip link set "{{ item.1.brif }}" netns "{{ item.0.pid }}" ; fi
      docker exec "{{ item.0.ns_name }}" brctl show "{{ item.0.bridge_name }}" | grep -w '{{ item.1.brif }}' ; if [ $? -ne 0 ] ; then docker exec "{{ item.0.ns_name }}" brctl addif "{{ item.0.bridge_name }}" "{{ item.1.brif }}" ; fi
    when:
      - item.1.brif != []
      - item.1.name != []
      - item.1.vmif != []
    with_subelements:
      - "{{ Subnet }}"
      - vms

  - name: All interfaces and bridges UP
    shell: |
      docker exec "{{ item.0.ns_name}}" ip link set "{{ item.1.brif }}" up
      docker exec "{{ item.0.ns_name }}" ip link set dev "{{ item.0.bridge_name }}" up
    when:
      - item.1.brif != []
      - item.1.name != []
      - item.1.vmif != []
    with_subelements:
      - "{{ Subnet }}"
      - vms

  - name: Add IP to DNS Interface
    shell: |
      docker exec "{{ item.0.ns_name }}" ip addr show "{{ item.1.dnsif }}" | awk 'FNR==3{ print $2}'| grep -w '^{{ item.1.dnsif_ip }}' ; if [ $? -ne 0 ] ; then docker exec "{{ item.0.ns_name }}" ip addr add "{{ item.1.dnsif_ip }}" dev "{{ item.1.dnsif }}" ; fi
    when:
      - item.1.brif != []
      - item.1.dhcp_end != []
      - item.1.dhcp_start != []
      - item.1.dnsif != []
      - item.1.dnsif_ip != []
      - item.1.net_mask != []
    with_subelements:
      - "{{ Subnet }}"
      - dns

  - name: Install DHCP Server
    shell: |
      docker exec "{{ item.0.ns_name }}" ps aux | grep -w '[d]nsmasq --interface {{ item.1.dnsif }} -z --dhcp-range={{ item.1.dhcp_start }},{{ item.1.dhcp_end }}' ; if [ $? -ne 0 ] ; then docker exec "{{ item.0.ns_name }}" dnsmasq --interface "{{ item.1.dnsif }}" -z --dhcp-range={{ item.1.dhcp_start }},'{{ item.1.dhcp_end }}' ; fi
    when:
      - item.1.brif != []
      - item.1.dhcp_end != []
      - item.1.dhcp_start != []
      - item.1.dnsif != []
      - item.1.dnsif_ip != []
      - item.1.net_mask != []
    with_subelements:
      - "{{ Subnet }}"
      - dns

  - name: Create VXLAN devices
    shell: |
      docker exec "{{ item.0.ns_name }}" ip link show "{{ item.1.v_name }}" ; if [ $? -ne 0 ] ; then docker exec "{{ item.0.ns_name }}" ip link add "{{ item.1.v_name }}" type vxlan id "{{ item.1.id }}" local "{{ item.1.local_ip }}" remote "{{ item.1.remote_ip }}" dstport "{{ item.1.dsport }}" dev "{{ item.1.dev }}" ; docker exec "{{ item.0.ns_name }}" ip link set dev "{{ item.1.v_name }}" up ; fi
    when:
      - item.1.dsport != []
      - item.1.id != []
      - item.1.local_ip != []
      - item.1.remote_ip != []
      - item.1.v_name != []
    with_subelements:
      - "{{ Subnet }}"
      - vxlan

  - name: Attach VXLANs to bridge
    shell: |
      docker exec "{{ item.0.ns_name }}" brctl show "{{ item.0.bridge_name }}" | grep -w '{{ item.1.v_name }}' ; if [ $? -ne 0 ] ; then docker exec "{{ item.0.ns_name }}" brctl addif "{{ item.0.bridge_name }}" "{{ item.1.v_name }}" ; fi
    when:
      - item.1.dev != []
      - item.1.subnet_route != []
      - item.1.tenant_route_ip != []
      - item.1.dsport != []
      - item.1.id != []
      - item.1.local_ip != []
      - item.1.remote_ip != []
      - item.1.v_name != []
    with_subelements:
      - "{{ Subnet }}"
      - vxlan
